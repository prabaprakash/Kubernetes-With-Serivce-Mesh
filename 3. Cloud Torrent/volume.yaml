# Note - an NFS server isn't really a Kubernetes
# concept. We're just creating it in Kubernetes
# for illustration and convenience. In practice,
# it might be run in some other system.

# Create a service to expose the NFS server
# to pods inside the cluster.

# kind: Service
# apiVersion: v1
# metadata:
#   name: nfs-service
# spec:
#   selector:
#     role: nfs
#   ports:
#     # Open the ports required by the NFS server
#     # Port 2049 for TCP
#     - name: tcp-2049
#       port: 2049
#       protocol: TCP

#     # Port 111 for UDP
#     - name: udp-111
#       port: 111
#       protocol: UDP

# ---

# # Run the NFS server image in a pod that is
# # exposed by the service.

# kind: Pod
# apiVersion: v1
# metadata:
#   name: nfs-server-pod
#   labels:
#     role: nfs
# spec:
#   containers:
#     - name: nfs-server-container
#       image: cpuguy83/nfs-server
#       securityContext:
#         privileged: true
#       args:
#         # Pass the paths to share to the Docker image
#         - /
        
# ---

# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: my-nfs-share
#   namespace: default
# spec:
#   capacity:
#     storage: 1Gi # This size is used to match a volume to a tenents claim
#   accessModes:
#     - ReadWriteMany # Access modes are defined below
#   persistentVolumeReclaimPolicy: Recycle # Reclaim policies are defined below 
#   nfs:
#     server: 10.245.154.76 # Please change this to your NFS server
#     path: /

# ---

# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: myapp-nfs
#   namespace: default
# spec:
#   accessModes:
#     - ReadWriteOnce # Access modes for volumes is defined under Persistent Volumes
#   resources:
#     requests:
#       storage: 1Gi